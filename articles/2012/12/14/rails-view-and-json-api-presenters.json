{"id":"/articles/2012/12/14/rails-view-and-json-api-presenters","title":"Rails View and JSON API Presenters","date":"2012-12-14 05:45 MDT","tags":"rails","content":"<p>Presenters are essentially a bridge between the model and the view. They allow you to customize the output of a data object without polluting your views with <code>if</code>s and <code>else</code>s.</p>\n<p>READMORE</p>\n<p>For instance, let&#39;s say we have the following model.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>\n  attr_accessible <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:occupation</span>, <span class=\"hljs-symbol\">:education</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>and the following view</p>\n<pre><code class=\"hljs html\"><span class=\"xml\">Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> @person.name.present? </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> @person.name </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">else</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> link_to <span class=\"hljs-string\">'Add a name'</span>, edit_name_path </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\nOccupation: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> @person.occupation.present? </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> @person.occupation </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">else</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> link_to <span class=\"hljs-string\">'Add a name'</span>, edit_occupation_path </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\nEducation: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> @person.education.present? </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> @person.education </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">else</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> link_to <span class=\"hljs-string\">'Add a name'</span>, edit_education_path </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span>\n</code></pre>\n<p>Our view is getting crowded quickly with all the <code>if</code> statements. It would be a lot nicer if we could call <a href=\"mailto:`@person.education\">`@person.education</a><code>and it\nwould add a link automatically if</code>education<code>is blank, without having to add the</code>if`s each time.</p>\n<h2 id=\"view-presenter\">View Presenter</h2>\n<p>Here is what we want our view to look when it&#39;s finished.</p>\n<pre><code class=\"hljs html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> present @person <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|presenter|</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> presenter.name </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  Occupation: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> presenter.occupation </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n  Education: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> presenter.education </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span>\n</code></pre>\n<p>That&#39;s better. It&#39;s shortened, and a lot easier to read. We removed the <code>if</code>s and the only piece that we added is the <code>present</code> block.\nThe <code>present</code> method is apart of our <code>application_helper.rb</code>.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">ApplicationHelper</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">present</span><span class=\"hljs-params\">(object, klass = <span class=\"hljs-literal\">nil</span>)</span></span>\n    klass <span class=\"hljs-params\">||</span>= <span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{object.<span class=\"hljs-keyword\">class</span>}</span>Presenter\"</span>.constantize\n    presenter = klass.new(object, <span class=\"hljs-keyword\">self</span>)\n    <span class=\"hljs-keyword\">yield</span> presenter <span class=\"hljs-keyword\">if</span> block_given?\n    presenter\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>It creates a new instance of the <code>PersonPresenter</code> and passes in the object, in this case <code>@person</code>, and the view block.</p>\n<p>Next, we want to create a <code>BasePresenter</code> that each individual presenter will inherit from.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasePresenter</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>(<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span>, <span class=\"hljs-title\">template</span>)</span>\n    <span class=\"hljs-meta\">@object</span> = <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span></span>\n    <span class=\"hljs-meta\">@template</span> = template\n  end\nend\n</code></pre>\n<p>The only thing that <code>initialize</code> does is create instance variables of <code>object</code> and <code>template</code> for later use. Now, on to the\n<code>PersonPresenter</code>.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonPresenter</span> &lt; BasePresenter</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span></span>\n    <span class=\"hljs-keyword\">if</span> @object.name.present?\n      @object.name\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a name'</span>, new_name_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">occupation</span></span>\n    <span class=\"hljs-keyword\">if</span> @object.occupation.present?\n      @object.occupation\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a occupation'</span>, new_occupation_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">education</span></span>\n    <span class=\"hljs-keyword\">if</span> @object.education.present?\n      @object.education\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a education'</span>, new_education_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>This is good, but always calling <code>@object</code> is a little ambiguous. It would be better if we could make it explicit by calling\n<code>person.name</code> instead of <a href=\"mailto:`@object.name\">`@object.name</a>`, so let&#39;s add a few things.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonPresenter</span> &lt; BasePresenter</span>\n  presents <span class=\"hljs-symbol\">:person</span>\n  ...\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>and</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasePresenter</span></span>\n  ...\n\n  private\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">self</span>.<span class=\"hljs-title\">presents</span><span class=\"hljs-params\">(name)</span></span>\n    define_method(name) <span class=\"hljs-keyword\">do</span>\n      @object\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>This basically is saying <code>person = @object</code>. So, now we can use <code>person</code> instead of <code>@object</code>. And now we can finish our <code>PersonPresenter</code>.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonPresenter</span> &lt; BasePresenter</span>\n  presents <span class=\"hljs-symbol\">:person</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span></span>\n    <span class=\"hljs-keyword\">if</span> person.name.present?\n      person.name\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a name'</span>, new_name_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">occupation</span></span>\n    <span class=\"hljs-keyword\">if</span> person.occupation.present?\n      person.occupation\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a occupation'</span>, new_occupation_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">education</span></span>\n    <span class=\"hljs-keyword\">if</span> person.education.present?\n      person.education\n    <span class=\"hljs-keyword\">else</span>\n      link_to <span class=\"hljs-string\">'Add a education'</span>, new_education_path\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>But wait, we added <code>link_to</code> to the presenter. We will have to add a way to render the anchors. We could include <code>UrlHelper</code>, but\nlet&#39;s do it the sexy way, by using <code>method_missing</code>.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasePresenter</span></span>\n  ...\n\n  private\n\n  ...\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">method_missing</span><span class=\"hljs-params\">(*args, &amp;block)</span></span>\n    @template.send(*args, &amp;block)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Remember the instance variable <code>@template</code> that we defined in <code>initialize</code>? We are sending all <code>method_missing</code> calls to the view\n(<code>@template</code>), where it already has the ability to render links.</p>\n<p>There! We now have a way to add attributes to a view without always having to add <code>if</code>s each time.</p>\n<h2 id=\"json-api-presenter\">JSON API Presenter</h2>\n<p>In the same fashion that views can use presenters, API calls can use presenters too. Although, rather than displaying links, API\ncalls use custom formats. For instance, when you want to display only a couple model properties, or want to add custom properties.</p>\n<p>Let&#39;s define a model.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Team</span> &lt; ActiveRecord::Base</span>\n  attr_accessible <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:nickname</span>, <span class=\"hljs-symbol\">:location</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>If you were to call <code>Team.first.to_json</code>, you would get someting similar to this.</p>\n<pre><code class=\"hljs js\">{\n<span class=\"hljs-symbol\">  city:</span> null,\n<span class=\"hljs-symbol\">  created_at:</span> <span class=\"hljs-string\">\"2012-12-15T02:08:45Z\"</span>,\n<span class=\"hljs-symbol\">  id:</span> <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-symbol\">  name:</span> <span class=\"hljs-string\">\"Green Bay\"</span>,\n<span class=\"hljs-symbol\">  nickname:</span> <span class=\"hljs-string\">\"Packers\"</span>,\n<span class=\"hljs-symbol\">  updated_at:</span> <span class=\"hljs-string\">\"2012-12-15T02:08:45Z\"</span>\n}\n</code></pre>\n<p>What if we didn&#39;t want to show <code>created_at</code> and <code>updated_at</code>? Queue the presenters.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasePresenter</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">( resource )</span></span>\n    name = resource.<span class=\"hljs-keyword\">class</span>.to_s.underscore\n    <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-keyword\">class</span>.send <span class=\"hljs-symbol\">:define_method</span>, name <span class=\"hljs-keyword\">do</span>\n      resource\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>The same way we started with view presenters, we create a base API presenter to inherit from. The only parameter it takes is an instance\nof a model. Where as the view presenter made you add something like <code>presents :person</code> to the presenter, we changed it up and now\nit is automatically created. So if we have a instance of <code>SportsTeam</code>, <code>sports_team</code> will be available for use.</p>\n<p>Now, let&#39;s create the <code>TeamPresenter</code> with a customized format.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TeamPresenter</span> &lt; BasePresenter</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">as_json</span><span class=\"hljs-params\">( include_root=<span class=\"hljs-literal\">false</span> )</span></span>\n    {\n      <span class=\"hljs-symbol\">:type</span> =&gt; <span class=\"hljs-string\">\"team\"</span>,\n      <span class=\"hljs-symbol\">:team</span> =&gt; {\n        <span class=\"hljs-symbol\">:id</span> =&gt; team.id,\n        <span class=\"hljs-symbol\">:city</span> =&gt; team.city,\n        <span class=\"hljs-symbol\">:name</span> =&gt; team.name,\n        <span class=\"hljs-symbol\">:nickname</span> =&gt; team.nickname\n      }\n    }\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>There isn&#39;t a whole lot of craziness going on here, but now we are only showing the attributes we want. <code>team</code> was defined when\ninitializing the <code>BasePresenter</code>.</p>\n<p>Any finally, how do we use this bad boy?</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TeamsController</span> &lt; ApplicationController</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span></span>\n    team = Team.find params[<span class=\"hljs-symbol\">:id</span>]\n    render <span class=\"hljs-symbol\">:json</span> =&gt; TeamPresenter.new( team ).to_json\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Resources used for this post:</p>\n<ul>\n<li><a href=\"http://railscasts.com/episodes/287-presenters-from-scratch\">http://railscasts.com/episodes/287-presenters-from-scratch</a></li>\n<li><a href=\"http://quickleft.com/blog/presenters-as-a-solution-to-asjson-woes-in-rails-apis\">http://quickleft.com/blog/presenters-as-a-solution-to-asjson-woes-in-rails-apis</a></li>\n</ul>\n"}