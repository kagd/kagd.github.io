{"id":"/articles/2015/08/27/angular-services-without-promises","title":"Angular Services Without Promises","date":"2015-08-27 03:02 MDT","tags":"angular, scheming","content":"<p>Services in Angular.js are a great tool for abstraction and re-use. They pull a resource\nfrom the server via a promise and then your code handles the resolve. The problem here\nis that all controllers, directives or whatever that handles the promise has to be setup\nto assign the data on resolve.</p>\n<p>But wouldn&#39;t it be great to have your service return the data inline without having\nto handle the promise each time? While maintaining the asynchronous nature of services?</p>\n<p>This can be accomplish with a combination of an Angular service and a Javascript schema generator\ncalled <a href=\"https://github.com/autoric/scheming\">Scheming</a>.</p>\n<p>Let&#39;s assume we have an order service that retrieves an order by ID.</p>\n<pre><code class=\"hljs coffee\"><span class=\"hljs-function\"><span class=\"hljs-title\">OrdersService</span> = <span class=\"hljs-params\">($http)</span> -&gt;</span>\n  @get = <span class=\"hljs-function\"><span class=\"hljs-params\">(id)</span> -&gt;</span>\n    $http.get <span class=\"hljs-string\">\"api/orders/<span class=\"hljs-subst\">#{ id }</span>\"</span>\n\n  <span class=\"hljs-keyword\">return</span> @\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'myApp'</span>)\n  .service <span class=\"hljs-string\">'OrdersService'</span>, OrdersService\n\nOrdersService.$inject = [<span class=\"hljs-string\">'$http'</span>]\n</code></pre>\n<p>Nothing out of the ordinary here. This is using promises to retrieve the data and we will\nhave to handle the resolve it in our controller. So let&#39;s change it so the service\nreturns a data object and still pulls the requested resource.</p>\n<p>First, we create a Scheming <code>Order</code> model:</p>\n<pre><code class=\"hljs coffee\">Order = (<span class=\"hljs-variable\">$window</span>) -&gt;\n  scheming = <span class=\"hljs-variable\">$window</span><span class=\"hljs-selector-class\">.Scheming</span>\n\n  scheming<span class=\"hljs-selector-class\">.create</span>\n    id: scheming<span class=\"hljs-selector-class\">.TYPES</span><span class=\"hljs-selector-class\">.Integer</span>\n    createdAt: scheming<span class=\"hljs-selector-class\">.TYPES</span><span class=\"hljs-selector-class\">.Date</span>\n    complete: scheming<span class=\"hljs-selector-class\">.TYPES</span><span class=\"hljs-selector-class\">.Boolean</span>\n\nangular.module(<span class=\"hljs-string\">'myApp'</span>)<span class=\"hljs-selector-class\">.factory</span> <span class=\"hljs-string\">'Order'</span>, Order\n\nOrder.<span class=\"hljs-variable\">$inject</span> = [<span class=\"hljs-string\">'$window'</span>]\n</code></pre>\n<p>This model should have all the fields that you need to represent in the view.</p>\n<p>Next, we need to update our service to use the <code>Order</code> model:</p>\n<pre><code class=\"hljs coffee\"><span class=\"hljs-function\"><span class=\"hljs-title\">OrdersService</span> = <span class=\"hljs-params\">($http, Order)</span> -&gt;</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">populateModelFromResponse</span> = <span class=\"hljs-params\">(model, data)</span> -&gt;</span>\n    data.forEach <span class=\"hljs-function\"><span class=\"hljs-params\">(value, key)</span> -&gt;</span>\n      model[key] = value\n\n  @get = <span class=\"hljs-function\"><span class=\"hljs-params\">(id)</span> -&gt;</span>\n    order = <span class=\"hljs-keyword\">new</span> Order()\n    $http.get <span class=\"hljs-string\">\"api/orders/<span class=\"hljs-subst\">#{ id }</span>\"</span>\n      .<span class=\"hljs-keyword\">then</span> <span class=\"hljs-function\"><span class=\"hljs-params\">(response)</span> -&gt;</span>\n        populateModelFromResponse(order, response.data)\n\n    <span class=\"hljs-keyword\">return</span> order\n\n  <span class=\"hljs-keyword\">return</span> @\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'myApp'</span>)\n  .service <span class=\"hljs-string\">'OrdersService'</span>, OrdersService\n\nOrdersService.$inject = [<span class=\"hljs-string\">'$http'</span>, <span class=\"hljs-string\">'Order'</span>]\n</code></pre>\n<p>Let&#39;s go over the <code>get</code> method first. Instead of returning a promise, we are now\nreturning a new instance of <code>Order</code>. That means that controller doesn&#39;t need to\nhandle the response because it will already have an object. Just an empty one.</p>\n<p>Now, since an object was returned in the service, any views interpolating a\nproperty of the <code>Order</code> model will be automatically updated. This does mean that\nthere may be a delay between when the call is made and when the model is populated.\nSo there may be empty view since the data doesn&#39;t exist until there is a response.</p>\n<p>I suppose <code>populateModelFromResponse</code> should be moved into it&#39;s own helper to be used\nin all the other services as well. But I will let you figure that one out.</p>\n<p>If you are wondering how to make this call in your controllers, you can simply do\nthis:</p>\n<pre><code class=\"hljs coffee\">@<span class=\"hljs-keyword\">order</span> <span class=\"hljs-title\">= OrdersService</span>.get(<span class=\"hljs-number\">123</span>)\n</code></pre>\n<p>rather than this:</p>\n<pre><code class=\"hljs coffee\">ctrl = @\nctrl.<span class=\"hljs-keyword\">order</span> <span class=\"hljs-title\">= {}\n\nOrdersService</span>.get(<span class=\"hljs-number\">123</span>).then (response) -&gt;\n  ctrl.<span class=\"hljs-keyword\">order</span> <span class=\"hljs-title\">= response</span>.data\n</code></pre>\n<p>After all this you are probably thinking, &quot;I don&#39;t need to use Scheming at all. I\ncan just use pojo (plain old Javascript objects).&quot; And, you are correct. What Scheming\nget&#39;s you is a great way to validate a model on the client side. :)</p>\n"}