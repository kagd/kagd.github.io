{"id":"/articles/2015/09/04/rails-form-objects","title":"Rails Form Objects","date":"2015-09-04 02:22 MDT","tags":"rails","content":"<p>Form objects are a pretty simple. If you are familiar with ActiveRecord models, then you\ncan work with form objects. Essentially, a form object is a non-persisted model. They\nallow you to run validations on specific properties of a separate, persisted model.</p>\n<p>READMORE</p>\n<h2 id=\"why-should-i-use-a-form-object-\">Why should I use a form object?</h2>\n<p>Form objects are a great solution when you have a model that has a bunch of if/else\nlogic on validations. For instance, if you have an admin section that allows for\nthe creation of a <code>User</code> model. Here is that model:</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-comment\"># located /app/models/user.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  validates <span class=\"hljs-symbol\">:first_name</span>,\n            <span class=\"hljs-symbol\">:last_name</span>,\n            <span class=\"hljs-symbol\">:phone_number</span>,\n            <span class=\"hljs-symbol\">:email</span>,\n            <span class=\"hljs-symbol\">:password</span>,\n            <span class=\"hljs-symbol\">:password_confirmation</span>,\n            <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>The admin can create the entire user so all of the validations should be run on save.</p>\n<p>Now, let&#39;s assume that there are non-admins that can update an user but don&#39;t have the\nrights to change emails and passwords. You could do something like:</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-comment\"># located /app/models/user.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:admin_update</span>\n  validates <span class=\"hljs-symbol\">:email</span>,\n            <span class=\"hljs-symbol\">:password</span>,\n            <span class=\"hljs-symbol\">:password_confirmation</span>,\n            <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-symbol\">if:</span> Proc.new{ admin_update == <span class=\"hljs-literal\">true</span>  }\n\n  validates <span class=\"hljs-symbol\">:first_name</span>,\n            <span class=\"hljs-symbol\">:last_name</span>,\n            <span class=\"hljs-symbol\">:phone_number</span>\n            <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>We added an <code>attr_accessor</code> to create a non-persisted property that we check each time\nto require <code>:email</code>, <code>:password</code> and <code>:password_confirmation</code> if being updated by an admin.</p>\n<p>There are two down side here. You have now created logic in your base model that has nothing\nto do with the model itself. It has to do with your business logic. And, you now\nhave to do this <code>user.admin_update = true</code> in any section updating the user by an admin.\nThis may be a bad example since email and password is typically only updated in one or\ntwo spots anyway, but you can see my point.</p>\n<h2 id=\"get-to-the-form-ojects-already-\">Get to the Form Ojects Already!</h2>\n<p>So, rather than creating a bunch of spaghetti logic within your models, use a form object.\nNon-admins can only update <code>:first_name</code>, <code>:last_name</code>, and <code>:phone_number</code>, so those\nare the only attributes within the form object.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-comment\"># located /app/forms/user.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Forms</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span></span>\n    <span class=\"hljs-keyword\">include</span> ActiveModel::Model\n\n    <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:first_name</span>, <span class=\"hljs-symbol\">:last_name</span>, <span class=\"hljs-symbol\">:phone_number</span>\n    validates <span class=\"hljs-symbol\">:first_name</span>, <span class=\"hljs-symbol\">:last_name</span>, <span class=\"hljs-symbol\">:phone_number</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n    validates <span class=\"hljs-symbol\">:phone_number</span>,\n              <span class=\"hljs-symbol\">length:</span> {\n                <span class=\"hljs-symbol\">is:</span> <span class=\"hljs-number\">10</span>\n              },\n              <span class=\"hljs-symbol\">numericality:</span> {\n                <span class=\"hljs-symbol\">only_integer:</span> <span class=\"hljs-literal\">true</span>\n              }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(attrs={})</span></span>\n      attrs.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|key, value|</span>\n        send(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{key}</span>=\"</span>, value)\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">attributes</span></span>\n      {\n        <span class=\"hljs-symbol\">first_name:</span> first_name,\n        <span class=\"hljs-symbol\">last_name:</span> last_name,\n        <span class=\"hljs-symbol\">phone_number:</span> phone_number\n      }\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_to</span><span class=\"hljs-params\">(user)</span></span>\n      <span class=\"hljs-keyword\">if</span> valid?\n        user.assign_attributes attributes\n        user.save <span class=\"hljs-symbol\">validate:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n</code></pre>\n<p>There is a little bit that we should go over here.</p>\n<p>First, we just set up a simple Ruby object and include <code>ActiveModel::Model</code>. This\nis what give us our validations.</p>\n<p>Next we setup our non-persisted attributes with <code>attr_accessor</code>. After that, a few\nvalidations. Both of which should look familiar to you if you work with Rails.</p>\n<p><code>initialize</code> is just iterating over each attribute passed in and setting it on the\nform object. This is similar to how <code>User.build</code> works. Here is an example:</p>\n<pre><code class=\"hljs rb\">user = User<span class=\"hljs-selector-class\">.find</span> params[:id]\n<span class=\"hljs-selector-tag\">form</span> = Forms::User<span class=\"hljs-selector-class\">.new</span> first_name: user<span class=\"hljs-selector-class\">.first_name</span>, last_name: user.last_name\n</code></pre>\n<p>Unfortunately, since we are just using <code>attr_accessor</code> we don&#39;t have anyway to\nget the collection of attributes as a hash. So we have to define the attributes\nmethod.</p>\n<p>And finally, <code>save_to</code> allows us to save our valid form object back to the parent\nuser. Notice we use <code>validate: false</code> because we don&#39;t want to trigger an email\nvalidation when the current non-admin can&#39;t do anything about it.</p>\n<h2 id=\"examples\">Examples</h2>\n<pre><code class=\"hljs rb\">user = User.find params[:id]\nform = Forms::User.<span class=\"hljs-keyword\">new</span> phone_number: <span class=\"hljs-string\">'5555555555'</span>\nform.save_to user #=&gt; <span class=\"hljs-keyword\">false</span>\nform.errors #=&gt; #&lt;ActiveModel::Errors:<span class=\"hljs-number\">0x007fd5c8814020</span> <span class=\"hljs-meta\">@base</span>=#&lt;Forms::User:<span class=\"hljs-number\">0x007fd5c884cc90</span> <span class=\"hljs-meta\">@phone</span>_number=<span class=\"hljs-string\">\"5555555555\"</span>, <span class=\"hljs-meta\">@validation</span>_context=nil, <span class=\"hljs-meta\">@errors</span>=#&lt;ActiveModel::Errors:<span class=\"hljs-number\">0x007fd5c8814020</span> ...&gt;&gt;, <span class=\"hljs-meta\">@messages</span>={:first_name=&gt;[<span class=\"hljs-string\">\"can't be blank\"</span>], :last_name=&gt;[<span class=\"hljs-string\">\"can't be blank\"</span>]}&gt;\nform.first_name = <span class=\"hljs-string\">'Grant'</span>\nform.last_name = <span class=\"hljs-string\">'Klinsing'</span>\nform.valid? #=&gt; <span class=\"hljs-keyword\">true</span>\nform.save_to user #=&gt; <span class=\"hljs-keyword\">true</span>\nuser.first_name #=&gt; <span class=\"hljs-string\">\"Grant\"</span>\n</code></pre>\n<h2 id=\"validation-callbacks\">Validation Callbacks</h2>\n<p>In most cases you will only need to add <code>include ActiveModel::Model</code>.\nIf you would like to run <code>before_validation</code> and/or <code>after_validation</code> just include\n<code>ActiveModel::Validations::Callbacks</code> after <code>include ActiveModel::Model</code>.</p>\n<pre><code class=\"hljs rb\"><span class=\"hljs-comment\"># located /app/forms/user.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Forms</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span></span>\n    <span class=\"hljs-keyword\">include</span> ActiveModel::Model\n    <span class=\"hljs-keyword\">include</span> ActiveModel::Validations::Callbacks\n    <span class=\"hljs-comment\">#...</span>\n    before_validation <span class=\"hljs-symbol\">:clean_phone_number</span>\n    <span class=\"hljs-comment\">#...</span>\n\n    private <span class=\"hljs-comment\">#-------------------------------------------------------</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">clean_phone_number</span></span>\n      @phone_number = @phone_number.scan(<span class=\"hljs-regexp\">/\\d+/</span>).join(<span class=\"hljs-string\">''</span>)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n</code></pre>\n<p>Now our <code>clean_phone_number</code> method allow phone_number to only be validated against\nthe numbers so our numericality check will not fail.</p>\n"}