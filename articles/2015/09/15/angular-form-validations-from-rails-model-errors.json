{"id":"/articles/2015/09/15/angular-form-validations-from-rails-model-errors","title":"Angular Form Validations from Rails Model Errors","date":"2015-9-16","tags":"angular, rails","content":"<p>I love Rails for it&#39;s baked in model validations. I love Angular for the simplicity.\nTogether, you can keep your data validations on the server and update the angular\nforms with something that is familiar to Rails devs, convention over configuration.</p>\n<p>First, let&#39;s start with the Rails model.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InventoryItem</span> &lt; ActiveRecord::Base</span>\n  validates <span class=\"hljs-symbol\">:price</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>We have a <code>InventoryItem</code> model that has a validation for presence. Since you are\nfamiliar with Rails validations, you know that if try to save your flight without\na price you will get an error that looks like this:</p>\n<pre><code class=\"hljs ruby\">inventory_item = InventoryItem.<span class=\"hljs-keyword\">new</span>\ninventory_item.valid? #=&gt; <span class=\"hljs-keyword\">false</span>\ninventory_item.errors.messages #=&gt;  {:price=&gt;[<span class=\"hljs-string\">\"can't be blank\"</span>]}</code></pre>\n<p>We just have to pass the error hash back to the UI as json.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InventoryItemController</span> &lt; ApplicationController</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span></span>\n    @inventory_item = InventoryItem.new params_for_create\n\n    <span class=\"hljs-keyword\">if</span> @inventory_item.save\n      <span class=\"hljs-comment\"># return the item</span>\n      render <span class=\"hljs-symbol\">json:</span> @inventory_item\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-comment\"># Return the inventory_item errors</span>\n      render <span class=\"hljs-symbol\">json:</span> { <span class=\"hljs-symbol\">errors:</span> @inventory_item.errors.messages }, <span class=\"hljs-symbol\">status:</span> <span class=\"hljs-symbol\">:conflict</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  private <span class=\"hljs-comment\">#-------------------------</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">params_for_create</span></span>\n    params[<span class=\"hljs-symbol\">:inventory_item</span>]\n    params.required(<span class=\"hljs-symbol\">:inventory_item</span>).permit(<span class=\"hljs-symbol\">:price</span>)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>Now let&#39;s create the Angular controller and view that will handle the error\nresponse.</p>\n<pre><code class=\"hljs coffee\">angular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'myApp'</span>, [<span class=\"hljs-string\">'error-helpers'</span>]) <span class=\"hljs-comment\"># error-helpers will be defined in just a bit</span>\n\n<span class=\"hljs-comment\"># Define controller</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">InventoryItemController</span> = <span class=\"hljs-params\">($http, ErrorHelpers)</span>-&gt;</span>\n  ctrl = @\n  <span class=\"hljs-comment\"># bind the methods from ErrorHelpers.setupErrorHelpers to this controller</span>\n  ErrorHelpers.setupErrorHelpers.call(ctrl)\n  <span class=\"hljs-comment\"># Setup new model</span>\n  ctrl.inventoryItem = {\n    price: <span class=\"hljs-literal\">null</span>\n  }\n\n  ctrl.<span class=\"hljs-function\"><span class=\"hljs-title\">onSubmit</span> = -&gt;</span>\n    <span class=\"hljs-comment\"># clear any errors that were set on a previous submit</span>\n    ctrl.clearErrors()\n\n    $http.post <span class=\"hljs-string\">'/api/inventory_items'</span>, ctrl.inventoryItem\n      .<span class=\"hljs-keyword\">then</span> <span class=\"hljs-function\"><span class=\"hljs-params\">(response)</span> -&gt;</span>\n        <span class=\"hljs-comment\"># do whatever you need to</span>\n      .<span class=\"hljs-keyword\">catch</span> <span class=\"hljs-function\"><span class=\"hljs-params\">(response)</span> -&gt;</span>\n        <span class=\"hljs-comment\"># populate the errors object</span>\n        ctrl.populateErrors(response.data.errors)\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'myApp'</span>).controller <span class=\"hljs-string\">'InventoryItemController'</span>, InventoryItemController\nInventoryItemController.$inject = [<span class=\"hljs-string\">'$http'</span>, <span class=\"hljs-string\">'ErrorHelpers'</span>]\n\n<span class=\"hljs-comment\"># Define ErrorHelpers</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">ErrorHelpers</span> = -&gt;</span>\n  helper = @\n  helper.<span class=\"hljs-function\"><span class=\"hljs-title\">setupErrorHelpers</span> = -&gt;</span>\n    binding = @\n    binding.errors = {}\n\n    binding.<span class=\"hljs-function\"><span class=\"hljs-title\">populateErrors</span> = <span class=\"hljs-params\">(errors)</span> -&gt;</span>\n      <span class=\"hljs-keyword\">for</span> own key, value <span class=\"hljs-keyword\">of</span> errors\n        binding.errors[key] = value\n\n    binding.<span class=\"hljs-function\"><span class=\"hljs-title\">clearErrors</span> = -&gt;</span>\n      <span class=\"hljs-keyword\">for</span> own key, value <span class=\"hljs-keyword\">of</span> binding.errors\n        <span class=\"hljs-keyword\">delete</span> binding.errors[key]\n\n  <span class=\"hljs-keyword\">return</span> helper\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'error-helpers'</span>, [])\n  .service <span class=\"hljs-string\">'ErrorHelpers'</span>, ErrorHelpers\n</code></pre>\n<p>For the HTML I will just use some Bootstrap markup:</p>\n<pre><code class=\"hljs html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">ng-submit</span>=<span class=\"hljs-string\">\"itemCtrl.onSubmit()\"</span> <span class=\"hljs-attr\">ng-controller</span>=<span class=\"hljs-string\">\"InventoryItemController as itemCtrl\"</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--\n    when itemCtrl.errors.price is present add 'has-class' to .form-group\n  --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-group\"</span> <span class=\"hljs-attr\">ng-class</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{ 'has-error': itemCtrl.errors.price }</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"price\"</span>&gt;</span>Item Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">ng-model</span>=<span class=\"hljs-string\">\"itemCtrl.inventoryItem.price\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--\n      when itemCtrl.errors.price is present display .help-block\n    --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"help-block\"</span> <span class=\"hljs-attr\">ng-if</span>=<span class=\"hljs-string\">\"itemCtrl.errors.price\"</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ itemCtrl.errors.price.join(', ') }</span><span class=\"xml\">}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span></code></pre>\n<p>This could definitely use a directive but rather than abstract it for this example,\nI chose simplicity.</p>\n<p>This will interpolate your Rails model errors when they are returned from the server\nand apply the Bootstrap <code>has-error</code> class to the markup to highlight the error.</p>\n"}