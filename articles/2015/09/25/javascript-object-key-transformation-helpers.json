{"id":"/articles/2015/09/25/javascript-object-key-transformation-helpers","title":"Javascript Object Key Transformation Helpers","date":"2015-9-25","tags":"javascript, angular","content":"<p>There are multiple times when I get data back from the server that is snake_case\nand I need it to be camelCase in my Javascript. Here are a couple of helpers I\nuse to transform Javascript keys.</p>\n<p>I should note that these helpers are using lodash and an object called StringHelpers\nto manipulate the keys.</p>\n<p>Here is the StringHelpers module</p>\n<pre><code class=\"hljs coffee\">StringHelpers =\n  <span class=\"hljs-comment\"># Capitalize the first letter of the string</span>\n  capitalize: <span class=\"hljs-function\"><span class=\"hljs-params\">(word)</span> -&gt;</span>\n    word.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + word.slice(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-comment\"># Convert the first char to lowercase</span>\n  uncapitalize: <span class=\"hljs-function\"><span class=\"hljs-params\">(word)</span> -&gt;</span>\n    word.charAt(<span class=\"hljs-number\">0</span>).toLowerCase() + word.slice(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-comment\"># Titleize a string</span>\n  <span class=\"hljs-comment\">## foo_bar =&gt; Foo Bar</span>\n  <span class=\"hljs-comment\">## BarFoo =&gt; Bar Foo</span>\n  titleize: <span class=\"hljs-function\"><span class=\"hljs-params\">(string)</span> -&gt;</span>\n    cleanTitle = string.replace(<span class=\"hljs-regexp\">/[ \\-_]+/g</span>, <span class=\"hljs-string\">' '</span>);\n    words = cleanTitle.replace(<span class=\"hljs-regexp\">/([A-Z])/g</span>, <span class=\"hljs-string\">\" $&amp;\"</span>).trim().split(<span class=\"hljs-string\">' '</span>)\n    capitalizedWords = words.map <span class=\"hljs-function\"><span class=\"hljs-params\">(word)</span> -&gt;</span>\n      capitalize(word)\n\n    capitalizedWords.join(<span class=\"hljs-string\">' '</span>)\n\n  <span class=\"hljs-comment\"># Converts CamelCase to snake_case</span>\n  <span class=\"hljs-comment\">## FooBar =&gt; foo_bar</span>\n  <span class=\"hljs-comment\">## fooBar =&gt; foo_bar</span>\n  underscore: <span class=\"hljs-function\"><span class=\"hljs-params\">(string)</span> -&gt;</span>\n    newString = string.replace <span class=\"hljs-regexp\">/([A-Z])/g</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">($<span class=\"hljs-number\">1</span>)</span> -&gt;</span>\n      <span class=\"hljs-string\">\"_<span class=\"hljs-subst\">#{ $<span class=\"hljs-number\">1.to</span>LowerCase() }</span>\"</span>\n    newString.replace(<span class=\"hljs-regexp\">/^_/</span>, <span class=\"hljs-string\">''</span>).replace(<span class=\"hljs-regexp\">/-/g</span>, <span class=\"hljs-string\">'_'</span>)</code></pre>\n<h2 id=\"convert-js-object-keys-to-camel-case-camelcase\">Convert JS Object Keys to Camel Case (camelCase)</h2>\n<pre><code class=\"hljs coffee\">objectKeysToCamelCase = (object) -&gt;\n  <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = <span class=\"hljs-literal\">null</span>\n\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">_</span>.isArray(object)\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = object.map (item) -&gt;\n      objectKeysToCamelCase item\n\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">_</span>.isObject(object)\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = {}\n    <span class=\"hljs-literal\">_</span>.forEach object, (value, key) -&gt;\n      <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Key</span> = StringHelpers.uncapitalize(StringHelpers.titleize(key).replace(/\\s+/g,<span class=\"hljs-string\">''</span>))\n      <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Key</span>] = objectKeysToCamelCase(value)\n\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = object\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span></code></pre>\n<h2 id=\"convert-js-object-keys-to-snake-case-snake_case\">Convert JS Object Keys to Snake Case (snake_case)</h2>\n<pre><code class=\"hljs coffee\">objectKeysToSnakeCase = (object) -&gt;\n  <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = <span class=\"hljs-literal\">null</span>\n\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">_</span>.isArray(object)\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = object.map (item) -&gt;\n      objectKeysToSnakeCase item\n\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">_</span>.isObject(object)\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = {}\n    <span class=\"hljs-literal\">_</span>.forEach object, (value, key) -&gt;\n      <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Key</span> = StringHelpers.underscore(key).replace(/\\s+/g,<span class=\"hljs-string\">''</span>)\n      <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Key</span>] = objectKeysToSnakeCase(value)\n\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span> = object\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Obj</span></code></pre>\n<h2 id=\"and-all-together-in-angular-modules\">And All Together in Angular Modules</h2>\n<pre><code class=\"hljs coffee\"><span class=\"hljs-comment\"># Lodash Module</span>\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'lodash'</span>, [])\n  .factory <span class=\"hljs-string\">'_'</span>,<span class=\"hljs-function\"> -&gt;</span>\n    <span class=\"hljs-built_in\">window</span>._\n\n<span class=\"hljs-comment\"># StringHelpers Module</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">StringHelpers</span> = -&gt;</span>\n  <span class=\"hljs-comment\"># Capitalize the first letter of the string</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">capitalize</span> = <span class=\"hljs-params\">(word)</span> -&gt;</span>\n    word.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + word.slice(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-comment\"># Convert the first char to lowercase</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">uncapitalize</span> = <span class=\"hljs-params\">(word)</span> -&gt;</span>\n    word.charAt(<span class=\"hljs-number\">0</span>).toLowerCase() + word.slice(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-comment\"># Titleize a string</span>\n  <span class=\"hljs-comment\">## foo_bar =&gt; Foo Bar</span>\n  <span class=\"hljs-comment\">## BarFoo =&gt; Bar Foo</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">titleize</span> = <span class=\"hljs-params\">(string)</span> -&gt;</span>\n    cleanTitle = string.replace(<span class=\"hljs-regexp\">/[ \\-_]+/g</span>, <span class=\"hljs-string\">' '</span>);\n    words = cleanTitle.replace(<span class=\"hljs-regexp\">/([A-Z])/g</span>, <span class=\"hljs-string\">\" $&amp;\"</span>).trim().split(<span class=\"hljs-string\">' '</span>)\n    capitalizedWords = words.map <span class=\"hljs-function\"><span class=\"hljs-params\">(word)</span> -&gt;</span>\n      capitalize(word)\n\n    capitalizedWords.join(<span class=\"hljs-string\">' '</span>)\n\n  <span class=\"hljs-comment\"># Converts CamelCase to snake_case</span>\n  <span class=\"hljs-comment\">## FooBar =&gt; foo_bar</span>\n  <span class=\"hljs-comment\">## fooBar =&gt; foo_bar</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">underscore</span> = <span class=\"hljs-params\">(string)</span> -&gt;</span>\n    newString = string.replace <span class=\"hljs-regexp\">/([A-Z])/g</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">($<span class=\"hljs-number\">1</span>)</span> -&gt;</span>\n      <span class=\"hljs-string\">\"_<span class=\"hljs-subst\">#{ $<span class=\"hljs-number\">1.to</span>LowerCase() }</span>\"</span>\n    newString.replace(<span class=\"hljs-regexp\">/^_/</span>, <span class=\"hljs-string\">''</span>).replace(<span class=\"hljs-regexp\">/-/g</span>, <span class=\"hljs-string\">'_'</span>)\n\n  <span class=\"hljs-keyword\">return</span> {\n    capitalize: capitalize\n    uncapitalize: uncapitalize\n    titleize: titleize\n    underscore: underscore\n  }\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'stringHelpers'</span>, [])\n  .factory <span class=\"hljs-string\">'StringHelpers'</span>, StringHelpers\n\n<span class=\"hljs-comment\"># StringHelpers Module</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">JsonHelpers</span> = <span class=\"hljs-params\">(StringHelpers, _)</span> -&gt;</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">objectKeysToCamelCase</span> = <span class=\"hljs-params\">(object)</span> -&gt;</span>\n    newObj = <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-keyword\">if</span> _.isArray(object)\n      newObj = object.map <span class=\"hljs-function\"><span class=\"hljs-params\">(item)</span> -&gt;</span>\n        objectKeysToCamelCase item\n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> _.isObject(object)\n      newObj = {}\n      _.forEach object, <span class=\"hljs-function\"><span class=\"hljs-params\">(value, key)</span> -&gt;</span>\n        newKey = StringHelpers.uncapitalize(StringHelpers.titleize(key).replace(<span class=\"hljs-regexp\">/\\s+/g</span>,<span class=\"hljs-string\">''</span>))\n        newObj[newKey] = objectKeysToCamelCase(value)\n\n    <span class=\"hljs-keyword\">else</span>\n      newObj = object\n\n    <span class=\"hljs-keyword\">return</span> newObj\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">objectKeysToSnakeCase</span> = <span class=\"hljs-params\">(object)</span> -&gt;</span>\n    newObj = <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-keyword\">if</span> _.isArray(object)\n      newObj = object.map <span class=\"hljs-function\"><span class=\"hljs-params\">(item)</span> -&gt;</span>\n        objectKeysToSnakeCase item\n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> _.isObject(object)\n      newObj = {}\n      _.forEach object, <span class=\"hljs-function\"><span class=\"hljs-params\">(value, key)</span> -&gt;</span>\n        newKey = StringHelpers.underscore(key).replace(<span class=\"hljs-regexp\">/\\s+/g</span>,<span class=\"hljs-string\">''</span>)\n        newObj[newKey] = objectKeysToSnakeCase(value)\n\n    <span class=\"hljs-keyword\">else</span>\n      newObj = object\n\n    <span class=\"hljs-keyword\">return</span> newObj\n\n  <span class=\"hljs-keyword\">return</span> {\n    objectKeysToCamelCase: objectKeysToCamelCase,\n    objectKeysToSnakeCase: objectKeysToSnakeCase\n  }\n\nangular.<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'jsonHelpers'</span>, [<span class=\"hljs-string\">'stringHelpers'</span>, <span class=\"hljs-string\">'lodash'</span>])\n  .factory <span class=\"hljs-string\">'JsonHelpers'</span>, JsonHelpers\n\nJsonHelpers.$inject = [<span class=\"hljs-string\">'StringHelpers'</span>, <span class=\"hljs-string\">'_'</span>]</code></pre>\n"}