{"id":"/articles/2019/01/24/async-await-array-reduce","title":"Using Async/Await with Array Reduce","date":"2019-1-24","tags":"javascript","content":"<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> filmTitles = [<span class=\"hljs-string\">'A New Hope'</span>, <span class=\"hljs-string\">'The Empire Strikes Back'</span>, <span class=\"hljs-string\">'Return of the Jedi'</span>];\n\nfilmTitles.reduce(\n  <span class=\"hljs-keyword\">async</span> (previousPromise, filmTitle) =&gt; {\n    <span class=\"hljs-keyword\">const</span> collection = <span class=\"hljs-keyword\">await</span> previousPromise;\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetchFilmByTitle(filmTitle);\n    collection.push(response)\n    <span class=\"hljs-keyword\">return</span> collection;\n  },\n  Promise.resolve([]),\n);</code></pre>\n<h2 id=\"code-explained\">Code Explained</h2>\n<p>Since <code>collection</code> always contains a <code>Promise</code> we need to resolve that promise to get the response which will finally become our collection and then we can keep pushing stuff to it and then return that as part of the function.</p>\n<p>Make the initial value of reduce to be a dummy resolved Promise and then we can keep resolving the promises returned by every call.\nMake a collection inside the function which can be extracted by resolving the passed in Promise.</p>\n<p><cite><a href=\"https://gyandeeps.com/array-reduce-async-await/\">Reference</a></cite></p>\n"}