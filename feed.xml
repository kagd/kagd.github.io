<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/articles</id>
  <link href="http://blog.url.com/articles"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-11-05T00:20:00-07:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Simulate Cursor Typing with Angular</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/11/05/simulate-cursor-typing-with-angular.html"/>
    <id>http://blog.url.com/articles/2015/11/05/simulate-cursor-typing-with-angular.html</id>
    <published>2015-11-05T00:20:00-07:00</published>
    <updated>2015-11-05T00:25:04-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Create the illusion of dynamic typing with a simple Angular directive.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here it is in action. (You may need to reload the page to see it fully)&lt;/p&gt;

&lt;pre&gt;
&lt;h3 livetype="javascript"&gt;&lt;/h3&gt;
&lt;/pre&gt;

&lt;p&gt;This can be accomplished with a simple directive&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;Directive = ($timeout) -&amp;gt;
  getRandomMs = (min, max) -&amp;gt;
    Math.floor(Math.random() * (max - min)) + min

  link = (scope) -&amp;gt;
    scope.string = &amp;#39;&amp;#39;

    # Split the string into an array
    chars = scope.livetype.split(&amp;#39;&amp;#39;)

    # the loop to create the typing illusion
    chars.reduce (lastMs, currentChar, idx) -&amp;gt;
      newMs = lastMs + getRandomMs(50, 750)

      $timeout -&amp;gt;
        scope.string += currentChar
      , newMs

      return newMs
    , 0

  {
    link: link
    restrict: &amp;#39;A&amp;#39;
    scope:
      livetype: &amp;#39;@livetype&amp;#39;
    template: &amp;#39;{{ string }}&amp;lt;span class=&amp;quot;livetype-cursor&amp;quot;&amp;gt;|&amp;lt;/span&amp;gt;&amp;#39;
  }

angular.module(&amp;#39;liveType&amp;#39;, []).directive &amp;#39;livetype&amp;#39;, Directive
Directive.$inject = [&amp;#39;$timeout&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The HTML&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-html"&gt;&amp;lt;h4 livetype=&amp;quot;javascript&amp;quot;&amp;gt;&amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And don&amp;rsquo;t forget out the CSS for the cursor blink&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-css"&gt;@keyframes livetype-cursor-blink {
  0%   { opacity: 0; }
  50%  { opacity: 1; }
  100% { opacity: 0; }
}
.livetype-cursor {
  animation: livetype-cursor-blink 750ms infinite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;style type="text/css"&gt;
@keyframes livetype-cursor-loop {
  0%   { opacity: 0; }
  50%  { opacity: 1; }
  100% { opacity: 0; }
}
.livetype-cursor {
  animation: livetype-cursor-loop 750ms infinite;
}
&lt;/style&gt;
</content>
  </entry>
  <entry>
    <title>75 points &amp; 75 rebounds in 4 games... sick!</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/11/04/75-points-75-rebounds-in-4-games-sick.html"/>
    <id>http://blog.url.com/articles/2015/11/04/75-points-75-rebounds-in-4-games-sick.html</id>
    <published>2015-11-04T22:23:00-07:00</published>
    <updated>2015-11-04T22:31:00-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;NERD NOTES: Andre Drummond is only player since 1976 with at least 75 Pts &amp;amp; 75 Reb in the first 4 games of a season. &lt;a href="https://t.co/33TvPkdug2"&gt;pic.twitter.com/33TvPkdug2&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mike &amp;amp; Mike (@MikeAndMike) &lt;a href="https://twitter.com/MikeAndMike/status/661888253688217600"&gt;November 4, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Installing the PG Gem with PostgresApp</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/11/04/installing-the-pg-gem-with-postgresapp.html"/>
    <id>http://blog.url.com/articles/2015/11/04/installing-the-pg-gem-with-postgresapp.html</id>
    <published>2015-11-04T20:46:00-07:00</published>
    <updated>2015-11-04T21:32:30-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you are having problem installing the pg gem and are using the Postgres app there
is a good chance that the gem can&amp;rsquo;t find the correct configuration for Postgres since
the config file is not availabe in &lt;code class="prettyprint"&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Try installing the gem with the command below, remembering to change the version
number to your installed version.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;gem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Versions/9.4/bin/pg_config
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Fibonacci Sequence Generator</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/30/ruby-fibonacci-sequence-generator.html"/>
    <id>http://blog.url.com/articles/2015/10/30/ruby-fibonacci-sequence-generator.html</id>
    <published>2015-10-30T21:14:00-06:00</published>
    <updated>2015-10-30T21:17:45-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just a simple function to generate a Fibonacci sequence to a defined number of places.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;def fibonacci_sequence(number_of_places)
  base_number = 0
  added_number = 1

  (1..number_of_places).map do |num|
    base_number_tmp = base_number
    base_number = added_number
    added_number = base_number_tmp + added_number
  end
end

def reverse_fibonacci_sequence(number_of_places)
  fibonacci_sequence(number_of_places).reverse
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Setup static site with Nginx &amp; Capistrano on Digital Ocean</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/30/setup-static-site-with-nginx-capistrano-on-digital-ocean.html"/>
    <id>http://blog.url.com/articles/2015/10/30/setup-static-site-with-nginx-capistrano-on-digital-ocean.html</id>
    <published>2015-10-30T08:02:00-06:00</published>
    <updated>2015-10-30T18:53:06-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Setting up a static site on Digital Ocean is pretty simple. First we will create a
user that will run the Capistrano deployment. Then, setup SSH, install Nginx, and
finally run Capistrano. Let&amp;rsquo;s get started!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All commands should be run as root unless specified. The Digital Ocean
instance setup here is for Ubuntu.&lt;/p&gt;

&lt;h1&gt;Setup Deploy User&lt;/h1&gt;

&lt;p&gt;First let&amp;rsquo;s SSH into the Digital Ocean server and add a new user called &lt;em&gt;deploy&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;adduser deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to add your new user to the sudo group&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;gpasswd -a deploy sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;em&gt;deploy&lt;/em&gt; user can run commands with super user privileges!&lt;/p&gt;

&lt;p&gt;Switch to new user for the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;su - deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Setup SSH as the deploy user&lt;/h1&gt;

&lt;p&gt;Create a new directory called .ssh and restrict its permissions with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;mkdir .ssh
# set permissions so deploy can read, write and execute
chmod 700 .ssh
nano .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From your local machine, copy your public key &lt;code class="prettyprint"&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;,
and then paste it into &lt;em&gt;authorized_keys&lt;/em&gt;. Save and close.&lt;/p&gt;

&lt;p&gt;Now restrict the permissions of the authorized_keys file with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;chmod 600 .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now be able to SSH into your server as the &lt;em&gt;deploy&lt;/em&gt; user.&lt;/p&gt;

&lt;h1&gt;Generate a server public key from Capistrano deployment&lt;/h1&gt;

&lt;p&gt;On the server run &lt;code class="prettyprint"&gt;ssh-keygen -t rsa&lt;/code&gt; and follow the prompts.&lt;/p&gt;

&lt;p&gt;Then add the server key to your git repo host (github, bitbucket, etc) deployment keys.&lt;/p&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt; will display the public key.&lt;/p&gt;

&lt;h1&gt;Install Nginx&lt;/h1&gt;

&lt;p&gt;Update out-of-date packages&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, install Nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;sudo apt-get install curl git-core nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Configure Nginx to run the site&lt;/h1&gt;

&lt;p&gt;Create a file named &lt;em&gt;static_site&lt;/em&gt; under Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cd /etc/nginx/sites-available
nano static_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add this config to the file&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;server {
  root /var/www/static_site/current;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;/var/www/static_site/current&lt;/code&gt; is the path where the site files will live. We
will manually create the &lt;em&gt;static_site&lt;/em&gt; directory later and Capistrano will create
the &lt;em&gt;current&lt;/em&gt; directory during deployment.&lt;/p&gt;

&lt;p&gt;Next, we will enable the site and remove the default Nginx config.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cd ../sites-enabled
ln -s ../sites-available/static_site static_site
rm default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, create the base directory for the site files and change permissions to
be owned by deploy.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;mkdir /var/www/static_site
chown deploy /var/www/static_site
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Capistrano&lt;/h1&gt;

&lt;p&gt;Add Capistrano to you Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;gem &amp;#39;capistrano&amp;#39;, &amp;#39;~&amp;gt; 3.4.0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capistrano needs a couple of directories and files so let&amp;rsquo;s run&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cap install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following to the generated &lt;code class="prettyprint"&gt;deploy.rb&lt;/code&gt; file, remembering to update the repo_url.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;# deploy.rb
# config valid Capistrano 3.4.x
lock &amp;#39;3.4.0&amp;#39;

set :application,   &amp;#39;static_site&amp;#39;
set :repo_url,      &amp;#39;git@&amp;lt;repoUrlHere&amp;gt;&amp;#39;
set :scm,           :git
set :user,          &amp;quot;deploy&amp;quot;
set :pty,           true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy this to your &lt;code class="prettyprint"&gt;production.rb&lt;/code&gt; file and update the server IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;# production.rb
set :application, &amp;#39;static_site&amp;#39;

## Servers we are going to deploy to ----------------------
server &amp;#39;xxx.xxx.xxx.xxx&amp;#39;, user: &amp;#39;deploy&amp;#39;

## Server Settings ----------------------------------------
set :deploy_to, &amp;quot;/var/www/static_site&amp;quot;

## Git Configuration Settings -----------------------------
set :branch, &amp;quot;master&amp;quot; # set to your desired branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Test out Capistrano&lt;/h2&gt;

&lt;p&gt;Check if necessary files and directories exist. If they don&amp;rsquo;t, Capistrano will create
them.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle exec cap production deploy:check
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deploy your App&lt;/h2&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle exec cap production deploy
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>How to fix OpenSSL::SSL::SSLError: certificate verify failed</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/07/how-to-fix-openssl-ssl-sslerror-certificate-verify-failed.html"/>
    <id>http://blog.url.com/articles/2015/10/07/how-to-fix-openssl-ssl-sslerror-certificate-verify-failed.html</id>
    <published>2015-10-07T17:23:00-06:00</published>
    <updated>2015-10-07T23:29:13-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you are using RVM, make sure to install Ruby versions without binaries. I&amp;rsquo;m
not sure why this works, but it does. The crappy part is that you have to do this
on every version bump of Ruby&amp;hellip; boo.&lt;/p&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;rvm install ruby-2.2.2 --without-binaries&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
