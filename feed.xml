<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/articles</id>
  <link href="http://blog.url.com/articles"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-10-30T22:14:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Ruby Fibonacci Sequence Generator</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/30/ruby-fibonacci-sequence-generator.html"/>
    <id>http://blog.url.com/articles/2015/10/30/ruby-fibonacci-sequence-generator.html</id>
    <published>2015-10-30T22:14:00-05:00</published>
    <updated>2015-10-30T22:17:45-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just a simple function to generate a Fibonacci sequence to a defined number of places.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;def fibonacci_sequence(number_of_places)
  base_number = 0
  added_number = 1

  (1..number_of_places).map do |num|
    base_number_tmp = base_number
    base_number = added_number
    added_number = base_number_tmp + added_number
  end
end

def reverse_fibonacci_sequence(number_of_places)
  fibonacci_sequence(number_of_places).reverse
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Setup static site with Nginx &amp; Capistrano on Digital Ocean</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/30/setup-static-site-with-nginx-capistrano-on-digital-ocean.html"/>
    <id>http://blog.url.com/articles/2015/10/30/setup-static-site-with-nginx-capistrano-on-digital-ocean.html</id>
    <published>2015-10-30T09:02:00-05:00</published>
    <updated>2015-10-30T19:53:06-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Setting up a static site on Digital Ocean is pretty simple. First we will create a
user that will run the Capistrano deployment. Then, setup SSH, install Nginx, and
finally run Capistrano. Let&amp;rsquo;s get started!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All commands should be run as root unless specified. The Digital Ocean
instance setup here is for Ubuntu.&lt;/p&gt;

&lt;h1&gt;Setup Deploy User&lt;/h1&gt;

&lt;p&gt;First let&amp;rsquo;s SSH into the Digital Ocean server and add a new user called &lt;em&gt;deploy&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;adduser deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to add your new user to the sudo group&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;gpasswd -a deploy sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;em&gt;deploy&lt;/em&gt; user can run commands with super user privileges!&lt;/p&gt;

&lt;p&gt;Switch to new user for the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;su - deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Setup SSH as the deploy user&lt;/h1&gt;

&lt;p&gt;Create a new directory called .ssh and restrict its permissions with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;mkdir .ssh
# set permissions so deploy can read, write and execute
chmod 700 .ssh
nano .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From your local machine, copy your public key &lt;code class="prettyprint"&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;,
and then paste it into &lt;em&gt;authorized_keys&lt;/em&gt;. Save and close.&lt;/p&gt;

&lt;p&gt;Now restrict the permissions of the authorized_keys file with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;chmod 600 .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now be able to SSH into your server as the &lt;em&gt;deploy&lt;/em&gt; user.&lt;/p&gt;

&lt;h1&gt;Generate a server public key from Capistrano deployment&lt;/h1&gt;

&lt;p&gt;On the server run &lt;code class="prettyprint"&gt;ssh-keygen -t rsa&lt;/code&gt; and follow the prompts.&lt;/p&gt;

&lt;p&gt;Then add the server key to your git repo host (github, bitbucket, etc) deployment keys.&lt;/p&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt; will display the public key.&lt;/p&gt;

&lt;h1&gt;Install Nginx&lt;/h1&gt;

&lt;p&gt;Update out-of-date packages&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, install Nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;sudo apt-get install curl git-core nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Configure Nginx to run the site&lt;/h1&gt;

&lt;p&gt;Create a file named &lt;em&gt;static_site&lt;/em&gt; under Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cd /etc/nginx/sites-available
nano static_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add this config to the file&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;server {
  root /var/www/static_site/current;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;/var/www/static_site/current&lt;/code&gt; is the path where the site files will live. We
will manually create the &lt;em&gt;static_site&lt;/em&gt; directory later and Capistrano will create
the &lt;em&gt;current&lt;/em&gt; directory during deployment.&lt;/p&gt;

&lt;p&gt;Next, we will enable the site and remove the default Nginx config.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cd ../sites-enabled
ln -s ../sites-available/static_site static_site
rm default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, create the base directory for the site files and change permissions to
be owned by deploy.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;mkdir /var/www/static_site
chown deploy /var/www/static_site
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Capistrano&lt;/h1&gt;

&lt;p&gt;Add Capistrano to you Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;gem &amp;#39;capistrano&amp;#39;, &amp;#39;~&amp;gt; 3.4.0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capistrano needs a couple of directories and files so let&amp;rsquo;s run&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;cap install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following to the generated &lt;code class="prettyprint"&gt;deploy.rb&lt;/code&gt; file, remembering to update the repo_url.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;# deploy.rb
# config valid Capistrano 3.4.x
lock &amp;#39;3.4.0&amp;#39;

set :application,   &amp;#39;static_site&amp;#39;
set :repo_url,      &amp;#39;git@&amp;lt;repoUrlHere&amp;gt;&amp;#39;
set :scm,           :git
set :user,          &amp;quot;deploy&amp;quot;
set :pty,           true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy this to your &lt;code class="prettyprint"&gt;production.rb&lt;/code&gt; file and update the server IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-rb"&gt;# production.rb
set :application, &amp;#39;static_site&amp;#39;

## Servers we are going to deploy to ----------------------
server &amp;#39;xxx.xxx.xxx.xxx&amp;#39;, user: &amp;#39;deploy&amp;#39;

## Server Settings ----------------------------------------
set :deploy_to, &amp;quot;/var/www/static_site&amp;quot;

## Git Configuration Settings -----------------------------
set :branch, &amp;quot;master&amp;quot; # set to your desired branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Test out Capistrano&lt;/h2&gt;

&lt;p&gt;Check if necessary files and directories exist. If they don&amp;rsquo;t, Capistrano will create
them.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle exec cap production deploy:check
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deploy your App&lt;/h2&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;bundle exec cap production deploy
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>How to fix OpenSSL::SSL::SSLError: certificate verify failed</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/10/07/how-to-fix-openssl-ssl-sslerror-certificate-verify-failed.html"/>
    <id>http://blog.url.com/articles/2015/10/07/how-to-fix-openssl-ssl-sslerror-certificate-verify-failed.html</id>
    <published>2015-10-07T18:23:00-05:00</published>
    <updated>2015-10-08T00:29:13-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you are using RVM, make sure to install Ruby versions without binaries. I&amp;rsquo;m
not sure why this works, but it does. The crappy part is that you have to do this
on every version bump of Ruby&amp;hellip; boo.&lt;/p&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;rvm install ruby-2.2.2 --without-binaries&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Javascript Object Key Transformation Helpers</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/09/25/javascript-object-key-transformation-helpers.html"/>
    <id>http://blog.url.com/articles/2015/09/25/javascript-object-key-transformation-helpers.html</id>
    <published>2015-09-25T17:33:00-05:00</published>
    <updated>2015-10-07T23:41:34-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There are multiple times when I get data back from the server that is snake_case
and I need it to be camelCase in my Javascript. Here are a couple of helpers I
use to transform Javascript keys.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I should note that these helpers are using lodash and an object called StringHelpers
to manipulate the keys.&lt;/p&gt;

&lt;p&gt;Here is the StringHelpers module&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;StringHelpers =
  # Capitalize the first letter of the string
  capitalize: (word) -&amp;gt;
    word.charAt(0).toUpperCase() + word.slice(1)

  # Convert the first char to lowercase
  uncapitalize: (word) -&amp;gt;
    word.charAt(0).toLowerCase() + word.slice(1)

  # Titleize a string
  ## foo_bar =&amp;gt; Foo Bar
  ## BarFoo =&amp;gt; Bar Foo
  titleize: (string) -&amp;gt;
    cleanTitle = string.replace(/[ \-_]+/g, &amp;#39; &amp;#39;);
    words = cleanTitle.replace(/([A-Z])/g, &amp;quot; $&amp;amp;&amp;quot;).trim().split(&amp;#39; &amp;#39;)
    capitalizedWords = words.map (word) -&amp;gt;
      capitalize(word)

    capitalizedWords.join(&amp;#39; &amp;#39;)

  # Converts CamelCase to snake_case
  ## FooBar =&amp;gt; foo_bar
  ## fooBar =&amp;gt; foo_bar
  underscore: (string) -&amp;gt;
    newString = string.replace /([A-Z])/g, ($1) -&amp;gt;
      &amp;quot;_#{ $1.toLowerCase() }&amp;quot;
    newString.replace(/^_/, &amp;#39;&amp;#39;).replace(/-/g, &amp;#39;_&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Convert JS Object Keys to Camel Case (camelCase)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;objectKeysToCamelCase = (object) -&amp;gt;
  newObj = null

  if _.isArray(object)
    newObj = object.map (item) -&amp;gt;
      objectKeysToCamelCase item

  else if _.isObject(object)
    newObj = {}
    _.forEach object, (value, key) -&amp;gt;
      newKey = StringHelpers.uncapitalize(StringHelpers.titleize(key).replace(/\s+/g,&amp;#39;&amp;#39;))
      newObj[newKey] = objectKeysToCamelCase(value)

  else
    newObj = object

  return newObj
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Convert JS Object Keys to Snake Case (snake_case)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;objectKeysToSnakeCase = (object) -&amp;gt;
  newObj = null

  if _.isArray(object)
    newObj = object.map (item) -&amp;gt;
      objectKeysToSnakeCase item

  else if _.isObject(object)
    newObj = {}
    _.forEach object, (value, key) -&amp;gt;
      newKey = StringHelpers.underscore(key).replace(/\s+/g,&amp;#39;&amp;#39;)
      newObj[newKey] = objectKeysToSnakeCase(value)

  else
    newObj = object

  return newObj
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;And All Together in Angular Modules&lt;/h2&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;# Lodash Module
angular.module(&amp;#39;lodash&amp;#39;, [])
  .factory &amp;#39;_&amp;#39;, -&amp;gt;
    window._

# StringHelpers Module
StringHelpers = -&amp;gt;
  # Capitalize the first letter of the string
  capitalize = (word) -&amp;gt;
    word.charAt(0).toUpperCase() + word.slice(1)

  # Convert the first char to lowercase
  uncapitalize = (word) -&amp;gt;
    word.charAt(0).toLowerCase() + word.slice(1)

  # Titleize a string
  ## foo_bar =&amp;gt; Foo Bar
  ## BarFoo =&amp;gt; Bar Foo
  titleize = (string) -&amp;gt;
    cleanTitle = string.replace(/[ \-_]+/g, &amp;#39; &amp;#39;);
    words = cleanTitle.replace(/([A-Z])/g, &amp;quot; $&amp;amp;&amp;quot;).trim().split(&amp;#39; &amp;#39;)
    capitalizedWords = words.map (word) -&amp;gt;
      capitalize(word)

    capitalizedWords.join(&amp;#39; &amp;#39;)

  # Converts CamelCase to snake_case
  ## FooBar =&amp;gt; foo_bar
  ## fooBar =&amp;gt; foo_bar
  underscore = (string) -&amp;gt;
    newString = string.replace /([A-Z])/g, ($1) -&amp;gt;
      &amp;quot;_#{ $1.toLowerCase() }&amp;quot;
    newString.replace(/^_/, &amp;#39;&amp;#39;).replace(/-/g, &amp;#39;_&amp;#39;)

  return {
    capitalize: capitalize
    uncapitalize: uncapitalize
    titleize: titleize
    underscore: underscore
  }

angular.module(&amp;#39;string-helpers&amp;#39;, [])
  .factory &amp;#39;StringHelpers&amp;#39;, StringHelpers

# StringHelpers Module
JsonHelpers = (StringHelpers, _) -&amp;gt;

  objectKeysToCamelCase = (object) -&amp;gt;
    newObj = null

    if _.isArray(object)
      newObj = object.map (item) -&amp;gt;
        objectKeysToCamelCase item

    else if _.isObject(object)
      newObj = {}
      _.forEach object, (value, key) -&amp;gt;
        newKey = StringHelpers.uncapitalize(StringHelpers.titleize(key).replace(/\s+/g,&amp;#39;&amp;#39;))
        newObj[newKey] = objectKeysToCamelCase(value)

    else
      newObj = object

    return newObj

  objectKeysToSnakeCase = (object) -&amp;gt;
    newObj = null

    if _.isArray(object)
      newObj = object.map (item) -&amp;gt;
        objectKeysToSnakeCase item

    else if _.isObject(object)
      newObj = {}
      _.forEach object, (value, key) -&amp;gt;
        newKey = StringHelpers.underscore(key).replace(/\s+/g,&amp;#39;&amp;#39;)
        newObj[newKey] = objectKeysToSnakeCase(value)

    else
      newObj = object

    return newObj

  return {
    objectKeysToCamelCase: objectKeysToCamelCase,
    objectKeysToSnakeCase: objectKeysToSnakeCase
  }

angular.module(&amp;#39;json-helpers&amp;#39;, [&amp;#39;string-helpers&amp;#39;, &amp;#39;lodash&amp;#39;])
  .factory &amp;#39;JsonHelpers&amp;#39;, JsonHelpers

JsonHelpers.$inject = [&amp;#39;StringHelpers&amp;#39;, &amp;#39;_&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>OSX Keep SSH Session Alive</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/09/19/osx-keep-ssh-session-alive.html"/>
    <id>http://blog.url.com/articles/2015/09/19/osx-keep-ssh-session-alive.html</id>
    <published>2015-09-19T23:43:00-05:00</published>
    <updated>2015-10-07T23:41:34-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For keeping the connection alive, you can check in &lt;code class="prettyprint"&gt;/etc/ssh_config&lt;/code&gt; the line where
it says &lt;code class="prettyprint"&gt;ServerAliveInterval&lt;/code&gt;, that tells you how often (in seconds) your computer
is gonna send a null packet to keep the connection alive. If you have a 0 in there
that indicates that your computer is not trying to keep the connection alive
(it is disabled), otherwise it tells you how often (in seconds) it is sending
the aforementioned packet. Try putting 120 or 240, if it is still killing your
connection, you can go lower, maybe to 5, if with that number it doesn&amp;rsquo;t happen,
maybe it is your router who is dumping the connection to free memory.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Angular Form Validations from Rails Model Errors</title>
    <link rel="alternate" href="http://blog.url.com/articles/2015/09/15/angular-form-validations-from-rails-model-errors.html"/>
    <id>http://blog.url.com/articles/2015/09/15/angular-form-validations-from-rails-model-errors.html</id>
    <published>2015-09-16T00:25:00-05:00</published>
    <updated>2015-10-07T23:41:34-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I love Rails for it&amp;rsquo;s baked in model validations. I love Angular for the simplicity.
Together, you can keep your data validations on the server and update the angular
forms with something that is familiar to Rails devs, convention over configuration.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s start with the Rails model.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-ruby"&gt;class InventoryItem &amp;lt; ActiveRecord::Base
  validates :price, presence: true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a &lt;code class="prettyprint"&gt;InventoryItem&lt;/code&gt; model that has a validation for presence. Since you are
familiar with Rails validations, you know that if try to save your flight without
a price you will get an error that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-ruby"&gt;inventory_item = InventoryItem.new
inventory_item.valid? #=&amp;gt; false
inventory_item.errors.messages #=&amp;gt;  {:price=&amp;gt;[&amp;quot;can&amp;#39;t be blank&amp;quot;]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just have to pass the error hash back to the UI as json.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-ruby"&gt;class InventoryItemController &amp;lt; ApplicationController
  def create
    @inventory_item = InventoryItem.new params_for_create

    if @inventory_item.save
      # return the item
      render json: @inventory_item
    else
      # Return the inventory_item errors
      render json: { errors: @inventory_item.errors.messages }, status: :conflict
    end
  end

  private #-------------------------

  def params_for_create
    params[:inventory_item]
    params.required(:inventory_item).permit(:price)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create the Angular controller and view that will handle the error
response.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-coffee"&gt;angular.module(&amp;#39;myApp&amp;#39;, [&amp;#39;error-helpers&amp;#39;]) # error-helpers will be defined in just a bit

# Define controller
InventoryItemController = ($http, ErrorHelpers)-&amp;gt;
  ctrl = @
  # bind the methods from ErrorHelpers.setupErrorHelpers to this controller
  ErrorHelpers.setupErrorHelpers.call(ctrl)
  # Setup new model
  ctrl.inventoryItem = {
    price: null
  }

  ctrl.onSubmit = -&amp;gt;
    # clear any errors that were set on a previous submit
    ctrl.clearErrors()

    $http.post &amp;#39;/api/inventory_items&amp;#39;, ctrl.inventoryItem
      .then (response) -&amp;gt;
        # do whatever you need to
      .catch (response) -&amp;gt;
        # populate the errors object
        ctrl.populateErrors(response.data.errors)

angular.module(&amp;#39;myApp&amp;#39;).controller &amp;#39;InventoryItemController&amp;#39;, InventoryItemController
InventoryItemController.$inject = [&amp;#39;$http&amp;#39;, &amp;#39;ErrorHelpers&amp;#39;]

# Define ErrorHelpers
ErrorHelpers = -&amp;gt;
  helper = @
  helper.setupErrorHelpers = -&amp;gt;
    binding = @
    binding.errors = {}

    binding.populateErrors = (errors) -&amp;gt;
      for own key, value of errors
        binding.errors[key] = value

    binding.clearErrors = -&amp;gt;
      for own key, value of binding.errors
        delete binding.errors[key]

  return helper

angular.module(&amp;#39;error-helpers&amp;#39;, [])
  .service &amp;#39;ErrorHelpers&amp;#39;, ErrorHelpers

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the HTML I will just use some Bootstrap markup:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-html"&gt;&amp;lt;form ng-submit=&amp;quot;itemCtrl.onSubmit()&amp;quot; ng-controller=&amp;quot;InventoryItemController as itemCtrl&amp;quot;&amp;gt;
  &amp;lt;!--
    when itemCtrl.errors.price is present add &amp;#39;has-class&amp;#39; to .form-group
  --&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot; ng-class=&amp;quot;{ &amp;#39;has-error&amp;#39;: itemCtrl.errors.price }&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;price&amp;quot;&amp;gt;Item Price&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;price&amp;quot; ng-model=&amp;quot;itemCtrl.inventoryItem.price&amp;quot;&amp;gt;
    &amp;lt;!--
      when itemCtrl.errors.price is present display .help-block
    --&amp;gt;
    &amp;lt;p class=&amp;quot;help-block&amp;quot; ng-if=&amp;quot;itemCtrl.errors.price&amp;quot;&amp;gt;{{ itemCtrl.errors.price.join(&amp;#39;, &amp;#39;) }}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could definitely use a directive but rather than abstract it for this example,
I chose simplicity.&lt;/p&gt;

&lt;p&gt;This will interpolate your Rails model errors when they are returned from the server
and apply the Bootstrap &lt;code class="prettyprint"&gt;has-error&lt;/code&gt; class to the markup to highlight the error.&lt;/p&gt;
</content>
  </entry>
</feed>
